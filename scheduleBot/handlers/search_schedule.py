from tokenize import group
from scheduleBot.keyboards.all_keyboards import yes_no_kb, duration_choice_kb

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router, F
from aiogram.types import Message
from scheduleBot.utils import has_fsm_group, has_fsm_teacher, has_fsm_auditorium
from scheduleBot.utils import find_group_in_db, find_teacher_in_db, find_auditorium_in_db
from scheduleBot.utils import find_schedule_for_day, find_schedule_for_week
from scheduleBot.handlers.back_to_main_menu import return_to_main_menu
import datetime
from collections import defaultdict

# –†–æ—É—Ç–µ—Ä –ø–æ–∏—Å–∫–∞
search_router = Router()

# –†–æ—É—Ç–µ—Ä –≤—ã–±–æ—Ä–∞
choice_router = Router()

# –†–æ—É—Ç–µ—Ä –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –ø–æ–∏—Å–∫–∞
date_router = Router()

# FSM
class SearchInfo(StatesGroup):
    group_name = State()
    group_id = State()

    teacher_name = State()
    teacher_id = State()

    auditorium_name = State()
    auditorium_id = State()

    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    delete_data = State()
"""
    –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø—ã
"""
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –≥—Ä—É–ø–ø—É
@search_router.message(F.text == "üë®‚Äçüéì–ì—Ä—É–ø–ø–∞üë©‚Äçüéì")
async def search_schedule_group(message: Message, state: FSMContext):
    if await has_fsm_group(state):
        # –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ —É–∂–µ –∏—Å–∫–∞–ª–∏ –≥—Ä—É–ø–ø—É, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = await state.get_data()
        last_group = data['group_name']
        await state.set_state(SearchInfo.group_name)
        await message.answer(
            f'–í—ã —É–∂–µ –∏—Å–∫–∞–ª–∏ "{last_group}" —Ä–∞–Ω–µ–µ. –•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è?',
            reply_markup=yes_no_kb(message.from_user.id)
        )
    else:
        await state.set_state(SearchInfo.group_name)
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ –∫–æ—Ä–æ—Ç–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏–Ω-368)")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–Ω–µ–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
@choice_router.message(F.text == "‚úÖ–î–∞‚úÖ", SearchInfo.group_name)
async def schedule_for_group_from_fsm(message: Message, state: FSMContext):
    data = await state.get_data()
    group_name = data['group_name']
    group_id = data['group_id']
    if group:
        await state.set_state(SearchInfo.group_id)
        await message.answer(f"–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?",
                             reply_markup=duration_choice_kb(message.from_user.id))
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –≥—Ä—É–ø–ø—É. –ù–∞–ø–∏—à–∏—Ç–µ –µ—ë –∑–∞–Ω–æ–≤–æ.")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏ –≤–≤–æ–¥–∏—Ç –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
@choice_router.message(F.text == "‚ùå–ù–µ—Ç‚ùå", SearchInfo.group_name)
async def search_schedule_new_group(message: Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ –∫–æ—Ä–æ—Ç–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏–Ω-368):")


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
@choice_router.message(SearchInfo.group_name)
async def handle_group_input(msg: Message, state: FSMContext):
    group_name = msg.text
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if group_name == "‚è™–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚è™":
        await return_to_main_menu(msg)
        return

    # –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –≤ –ë–î
    group_id = await find_group_in_db(group_name)

    if group_id:
        await state.update_data(group_name = group_name)
        await state.update_data(group_id = group_id)
        await state.set_state(SearchInfo.group_id)
        await msg.answer(f"–ì—Ä—É–ø–ø–∞ {group_name} –Ω–∞–π–¥–µ–Ω–∞!"
                         f" –ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?",
                         reply_markup=duration_choice_kb(msg.from_user.id))
    else:
        await msg.answer(f"–ì—Ä—É–ø–ø–∞ {group_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ü–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞
@date_router.message(F.text.in_(["1Ô∏è‚É£–°–µ–≥–æ–¥–Ω—è1Ô∏è‚É£", "2Ô∏è‚É£–ó–∞–≤—Ç—Ä–∞2Ô∏è‚É£"]), SearchInfo.group_id)
async def fetch_group_schedule(msg: Message, state: FSMContext):
    data = await state.get_data()
    group_name = data['group_name']
    group_id = data['group_id']
    date_filter = "today" if msg.text == "1Ô∏è‚É£–°–µ–≥–æ–¥–Ω—è1Ô∏è‚É£" else "tomorrow"
    schedule_date = datetime.date.today().strftime("%d.%m.%Y") if msg.text == "1Ô∏è‚É£–°–µ–≥–æ–¥–Ω—è1Ô∏è‚É£" else (datetime.date.today() + datetime.timedelta(days=1)).strftime("%d.%m.%Y")

    if group_id:
        schedule = await find_schedule_for_day(participant_id=group_id, date_filter=date_filter)
        if schedule:
            schedule_text = "\n\n".join(
                f"üìö {item['subject_name']} ({item['event_kind']})\n"
                f"‚è∞ {item['start_time']} - {item['end_time']}\n"
                f"üè¢ {item['room']}\n"
                for item in schedule
            )
            await msg.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group_name} –Ω–∞ {schedule_date}:\n\n{schedule_text}", reply_markup=duration_choice_kb(msg.from_user.id))
        else:
            await msg.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=duration_choice_kb(msg.from_user.id))
    else:
        await msg.answer("ID –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫.")


# –ü–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã –Ω–∞ —ç—Ç—É –∏–ª–∏ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
@date_router.message(F.text.in_(["3Ô∏è‚É£–≠—Ç–∞ –Ω–µ–¥–µ–ª—è3Ô∏è‚É£", "4Ô∏è‚É£–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è4Ô∏è‚É£"]), SearchInfo.group_id)
async def fetch_group_schedule_week(msg: Message, state: FSMContext):
    data = await state.get_data()
    group_name = data["group_name"]
    group_id = data["group_id"]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é –Ω–µ–¥–µ–ª—é –∏—Å–∫–∞—Ç—å
    date_filter = "this_week" if msg.text == "3Ô∏è‚É£–≠—Ç–∞ –Ω–µ–¥–µ–ª—è3Ô∏è‚É£" else "next_week"

    if not group_id:
        await msg.answer("ID –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫.")
        return

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–µ—Ä–Ω—ë—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é)
    schedule = await find_schedule_for_week(participant_id = group_id, date_filter = date_filter)

    if not schedule:
        await msg.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=duration_choice_kb(msg.from_user.id))
        return

    from collections import defaultdict
    import datetime

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –¥–∞—Ç–µ
    schedule_by_date = defaultdict(list)
    for item in schedule:
        schedule_by_date[item["date"]].append(item)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
    text_parts = []
    for date_str in sorted(schedule_by_date.keys()):
        items_for_day = schedule_by_date[date_str]
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º YYYY-MM-DD –∫ DD.MM.YYYY
        day_formatted = datetime.datetime.strptime(date_str, "%Y-%m-%d").strftime("%d.%m.%Y")

        # –ú–æ–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –∂–∏—Ä–Ω—ã–º —Å –ø–æ–º–æ—â—å—é HTML-—Ç–µ–≥–∞ <b> (–∏–ª–∏ <u>, <i>, <code> –∏ —Ç.–¥.)
        # –í–∞–∂–Ω–æ: –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å parse_mode='HTML'.
        day_schedule_text = "\n\n".join(
            f"üìö {one['subject_name']} ({one['event_kind']})\n"
            f"‚è∞ {one['start_time']} - {one['end_time']}\n"
            f"üè¢ {one['room']}"
            for one in items_for_day
        )

        # –í—ã–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
        text_parts.append(f"<b>{day_formatted}</b>\n{day_schedule_text}")

    schedule_text = "\n\n".join(text_parts)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–¥–µ–ª–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ–¥–µ–ª–∏
    if date_filter == "this_week":
        week_title = "–≠–¢–£ –Ω–µ–¥–µ–ª—é"
    else:
        week_title = "–°–õ–ï–î–£–Æ–©–£–Æ –Ω–µ–¥–µ–ª—é"

    # –ü–µ—Ä–µ–¥–∞–µ–º parse_mode='HTML', —á—Ç–æ–±—ã —Ç–µ–≥–∏ <b> –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏
    await msg.answer(
        f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã <b>{group_name}</b> –Ω–∞ {week_title} (–ü–Ω‚Äì–°–±):\n\n{schedule_text}",
        parse_mode="HTML", reply_markup=duration_choice_kb(msg.from_user.id)
    )


"""
    –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
"""
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@search_router.message(F.text == "üë®‚Äçüè´–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—åüë©‚Äçüè´")
async def search_schedule_teacher(message: Message, state: FSMContext):
    if await has_fsm_teacher(state):
        # –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ —É–∂–µ –∏—Å–∫–∞–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = await state.get_data()
        last_teacher = data['teacher_name']
        await state.set_state(SearchInfo.teacher_name)
        await message.answer(
            f'–í—ã —É–∂–µ –∏—Å–∫–∞–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è "{last_teacher}" —Ä–∞–Ω–µ–µ. –•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –§–ò–û –ø–æ–≤—Ç–æ—Ä–Ω–æ?',
            reply_markup=yes_no_kb(message.from_user.id)
        )
    else:
        await state.set_state(SearchInfo.teacher_name)
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–Ω–µ–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@choice_router.message(F.text == "‚úÖ–î–∞‚úÖ", SearchInfo.teacher_name)
async def schedule_for_teacher_from_fsm(message: Message, state: FSMContext):
    data = await state.get_data()
    teacher_name = data['teacher_name']
    teacher_id = data['teacher_id']
    if group:
        await state.set_state(SearchInfo.teacher_id)
        await message.answer(f"–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?",
                             reply_markup=duration_choice_kb(message.from_user.id))
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è. –ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –§–ò–û –∑–∞–Ω–æ–≤–æ.")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏ –≤–≤–æ–¥–∏—Ç –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@choice_router.message(F.text == "‚ùå–ù–µ—Ç‚ùå", SearchInfo.teacher_name)
async def search_schedule_new_teacher(message: Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@choice_router.message(SearchInfo.teacher_name)
async def handle_teacher_input(msg: Message, state: FSMContext):
    teacher_name = msg.text
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if teacher_name == "‚è™–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚è™":
        await return_to_main_menu(msg)
        return

    # –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –≤ –ë–î
    teacher_id = await find_teacher_in_db(teacher_name)

    if teacher_id:
        await state.update_data(teacher_name = teacher_name)
        await state.update_data(teacher_id = teacher_id)
        await state.set_state(SearchInfo.teacher_id)
        await msg.answer(f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {teacher_name} –Ω–∞–π–¥–µ–Ω!"
                         f" –ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?",
                         reply_markup=duration_choice_kb(msg.from_user.id))
    else:
        await msg.answer(f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {teacher_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ü–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞
@date_router.message(F.text.in_(["1Ô∏è‚É£–°–µ–≥–æ–¥–Ω—è1Ô∏è‚É£", "2Ô∏è‚É£–ó–∞–≤—Ç—Ä–∞2Ô∏è‚É£"]), SearchInfo.teacher_id)
async def fetch_teacher_schedule(msg: Message, state: FSMContext):
    data = await state.get_data()
    teacher_name = data['teacher_name']
    teacher_id = data['teacher_id']
    date_filter = "today" if msg.text == "1Ô∏è‚É£–°–µ–≥–æ–¥–Ω—è1Ô∏è‚É£" else "tomorrow"
    schedule_date = datetime.date.today().strftime("%d.%m.%Y") if msg.text == "1Ô∏è‚É£–°–µ–≥–æ–¥–Ω—è1Ô∏è‚É£" else (datetime.date.today() + datetime.timedelta(days=1)).strftime("%d.%m.%Y")

    if teacher_id:
        schedule = await find_schedule_for_day(participant_id=teacher_id, date_filter=date_filter)
        if schedule:
            schedule_text = "\n\n".join(
                f"üìö {item['subject_name']} ({item['event_kind']})\n"
                f"‚è∞ {item['start_time']} - {item['end_time']}\n"
                f"üè¢ {item['room']}\n"
                for item in schedule
            )
            await msg.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_name} –Ω–∞ {schedule_date}:\n\n{schedule_text}", reply_markup=duration_choice_kb(msg.from_user.id))
        else:
            await msg.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=duration_choice_kb(msg.from_user.id))
    else:
        await msg.answer("ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫.")

# –ü–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç—É –∏–ª–∏ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
@date_router.message(F.text.in_(["3Ô∏è‚É£–≠—Ç–∞ –Ω–µ–¥–µ–ª—è3Ô∏è‚É£", "4Ô∏è‚É£–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è4Ô∏è‚É£"]), SearchInfo.teacher_id)
async def fetch_teacher_schedule_week(msg: Message, state: FSMContext):
    data = await state.get_data()
    teacher_name = data["teacher_name"]
    teacher_id = data["teacher_id"]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é –Ω–µ–¥–µ–ª—é –∏—Å–∫–∞—Ç—å
    date_filter = "this_week" if msg.text == "3Ô∏è‚É£–≠—Ç–∞ –Ω–µ–¥–µ–ª—è3Ô∏è‚É£" else "next_week"

    if not teacher_id:
        await msg.answer("ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫.")
        return

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–µ—Ä–Ω—ë—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é)
    schedule = await find_schedule_for_week(participant_id = teacher_id, date_filter = date_filter)

    if not schedule:
        await msg.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=duration_choice_kb(msg.from_user.id))
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –¥–∞—Ç–µ
    schedule_by_date = defaultdict(list)
    for item in schedule:
        schedule_by_date[item["date"]].append(item)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
    text_parts = []
    for date_str in sorted(schedule_by_date.keys()):
        items_for_day = schedule_by_date[date_str]
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º YYYY-MM-DD –∫ DD.MM.YYYY
        day_formatted = datetime.datetime.strptime(date_str, "%Y-%m-%d").strftime("%d.%m.%Y")

        # –ú–æ–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –∂–∏—Ä–Ω—ã–º —Å –ø–æ–º–æ—â—å—é HTML-—Ç–µ–≥–∞ <b> (–∏–ª–∏ <u>, <i>, <code> –∏ —Ç.–¥.)
        # –í–∞–∂–Ω–æ: –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å parse_mode='HTML'.
        day_schedule_text = "\n\n".join(
            f"üìö {one['subject_name']} ({one['event_kind']})\n"
            f"‚è∞ {one['start_time']} - {one['end_time']}\n"
            f"üè¢ {one['room']}"
            for one in items_for_day
        )

        # –í—ã–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
        text_parts.append(f"<b>{day_formatted}</b>\n{day_schedule_text}")

    schedule_text = "\n\n".join(text_parts)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–¥–µ–ª–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ–¥–µ–ª–∏
    if date_filter == "this_week":
        week_title = "–≠–¢–£ –Ω–µ–¥–µ–ª—é"
    else:
        week_title = "–°–õ–ï–î–£–Æ–©–£–Æ –Ω–µ–¥–µ–ª—é"

    # –ü–µ—Ä–µ–¥–∞–µ–º parse_mode='HTML', —á—Ç–æ–±—ã —Ç–µ–≥–∏ <b> –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏
    await msg.answer(
        f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è <b>{teacher_name}</b> –Ω–∞ {week_title} (–ü–Ω‚Äì–°–±):\n\n{schedule_text}",
        parse_mode="HTML", reply_markup=duration_choice_kb(msg.from_user.id)
    )

"""
    –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–π
"""
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
@search_router.message(F.text == "üè¨–ê—É–¥–∏—Ç–æ—Ä–∏—èüè¨")
async def search_auditorium(message: Message, state: FSMContext):
    if await has_fsm_auditorium(state):
        # –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ —É–∂–µ –∏—Å–∫–∞–ª–∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = await state.get_data()
        last_auditorium = data['auditorium_name']
        await state.set_state(SearchInfo.auditorium_name)
        await message.answer(
            f'–í—ã —É–∂–µ –∏—Å–∫–∞–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è "{last_auditorium}" —Ä–∞–Ω–µ–µ. –•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ?',
            reply_markup=yes_no_kb(message.from_user.id)
        )
    else:
        await state.set_state(SearchInfo.auditorium_name)
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –í903)")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–Ω–µ–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
@choice_router.message(F.text == "‚úÖ–î–∞‚úÖ", SearchInfo.auditorium_name)
async def schedule_for_auditorium_from_fsm(message: Message, state: FSMContext):
    data = await state.get_data()
    auditorium_name = data['auditorium_name']
    auditorium_id = data['auditorium_id']
    if group:
        await state.set_state(SearchInfo.auditorium_id)
        await message.answer(f"–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?",
                             reply_markup=duration_choice_kb(message.from_user.id))
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è. –ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –§–ò–û –∑–∞–Ω–æ–≤–æ.")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏ –≤–≤–æ–¥–∏—Ç –Ω–æ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
@choice_router.message(F.text == "‚ùå–ù–µ—Ç‚ùå", SearchInfo.auditorium_name)
async def search_schedule_new_auditorium(message: Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –í903")

@choice_router.message(SearchInfo.auditorium_name)
async def handle_auditorium_input(msg: Message, state: FSMContext):
    auditorium_name = msg.text
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if auditorium_name == "‚è™–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚è™":
        await return_to_main_menu(msg)
        return

    # –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –≤ –ë–î
    auditorium_id = await find_auditorium_in_db(auditorium_name)

    if auditorium_id:
        await state.update_data(auditorium_name = auditorium_name)
        await state.update_data(auditorium_id = auditorium_id)
        await state.set_state(SearchInfo.auditorium_id)
        await msg.answer(f"–ê—É–¥–∏—Ç–æ—Ä–∏—è {auditorium_name} –Ω–∞–π–¥–µ–Ω–∞!"
                         f" –ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?",
                         reply_markup=duration_choice_kb(msg.from_user.id))
    else:
        await msg.answer(f"–ê—É–¥–∏—Ç–æ—Ä–∏—è {auditorium_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ü–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞
@date_router.message(F.text.in_(["1Ô∏è‚É£–°–µ–≥–æ–¥–Ω—è1Ô∏è‚É£", "2Ô∏è‚É£–ó–∞–≤—Ç—Ä–∞2Ô∏è‚É£"]), SearchInfo.auditorium_id)
async def fetch_teacher_schedule(msg: Message, state: FSMContext):
    data = await state.get_data()
    auditorium_name = data['auditorium_name']
    auditorium_id = data['auditorium_id']
    date_filter = "today" if msg.text == "1Ô∏è‚É£–°–µ–≥–æ–¥–Ω—è1Ô∏è‚É£" else "tomorrow"
    schedule_date = datetime.date.today().strftime("%d.%m.%Y") if msg.text == "1Ô∏è‚É£–°–µ–≥–æ–¥–Ω—è1Ô∏è‚É£" else (datetime.date.today() + datetime.timedelta(days=1)).strftime("%d.%m.%Y")

    if auditorium_id:
        schedule = await find_schedule_for_day(place_id=auditorium_id, date_filter=date_filter)
        if schedule:
            schedule_text = "\n\n".join(
                f"üìö {item['subject_name']} ({item['event_kind']})\n"
                f"‚è∞ {item['start_time']} - {item['end_time']}\n"
                f"üè¢ {item['room']}\n"
                for item in schedule
            )
            await msg.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ {auditorium_name} –Ω–∞ {schedule_date}:\n\n{schedule_text}", reply_markup=duration_choice_kb(msg.from_user.id))
        else:
            await msg.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=duration_choice_kb(msg.from_user.id))
    else:
        await msg.answer("ID –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫.")

# –ü–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞ —ç—Ç—É –∏–ª–∏ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
@date_router.message(F.text.in_(["3Ô∏è‚É£–≠—Ç–∞ –Ω–µ–¥–µ–ª—è3Ô∏è‚É£", "4Ô∏è‚É£–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è4Ô∏è‚É£"]), SearchInfo.auditorium_id)
async def fetch_teacher_schedule_week(msg: Message, state: FSMContext):
    data = await state.get_data()
    auditorium_name = data["auditorium_name"]
    auditorium_id = data["auditorium_id"]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é –Ω–µ–¥–µ–ª—é –∏—Å–∫–∞—Ç—å
    date_filter = "this_week" if msg.text == "3Ô∏è‚É£–≠—Ç–∞ –Ω–µ–¥–µ–ª—è3Ô∏è‚É£" else "next_week"

    if not auditorium_id:
        await msg.answer("ID –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫.")
        return

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–µ—Ä–Ω—ë—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é)
    schedule = await find_schedule_for_week(place_id = auditorium_id, date_filter = date_filter)

    if not schedule:
        await msg.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=duration_choice_kb(msg.from_user.id))
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –¥–∞—Ç–µ
    schedule_by_date = defaultdict(list)
    for item in schedule:
        schedule_by_date[item["date"]].append(item)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
    text_parts = []
    for date_str in sorted(schedule_by_date.keys()):
        items_for_day = schedule_by_date[date_str]
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º YYYY-MM-DD –∫ DD.MM.YYYY
        day_formatted = datetime.datetime.strptime(date_str, "%Y-%m-%d").strftime("%d.%m.%Y")

        # –ú–æ–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –∂–∏—Ä–Ω—ã–º —Å –ø–æ–º–æ—â—å—é HTML-—Ç–µ–≥–∞ <b> (–∏–ª–∏ <u>, <i>, <code> –∏ —Ç.–¥.)
        # –í–∞–∂–Ω–æ: –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å parse_mode='HTML'.
        day_schedule_text = "\n\n".join(
            f"üìö {one['subject_name']} ({one['event_kind']})\n"
            f"‚è∞ {one['start_time']} - {one['end_time']}\n"
            f"üè¢ {one['room']}"
            for one in items_for_day
        )

        # –í—ã–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
        text_parts.append(f"<b>{day_formatted}</b>\n{day_schedule_text}")

    schedule_text = "\n\n".join(text_parts)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–¥–µ–ª–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ–¥–µ–ª–∏
    if date_filter == "this_week":
        week_title = "–≠–¢–£ –Ω–µ–¥–µ–ª—é"
    else:
        week_title = "–°–õ–ï–î–£–Æ–©–£–Æ –Ω–µ–¥–µ–ª—é"

    # –ü–µ—Ä–µ–¥–∞–µ–º parse_mode='HTML', —á—Ç–æ–±—ã —Ç–µ–≥–∏ <b> –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏
    await msg.answer(
        f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ <b>{auditorium_name}</b> –Ω–∞ {week_title} (–ü–Ω‚Äì–°–±):\n\n{schedule_text}",
        parse_mode="HTML", reply_markup=duration_choice_kb(msg.from_user.id)
    )