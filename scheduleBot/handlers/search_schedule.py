import asyncio
from tokenize import group

#from importlib.metadata import pass_none


from aiogram.utils.chat_action import ChatActionSender

from scheduleBot.keyboards.all_keyboards import yes_no_kb, duration_choice_kb
from scheduleBot.utils import get_schedule_pool
from scheduleBot.create_bot import bot, redis_pool
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
import scheduleBot.keyboards.all_keyboards
from scheduleBot.handlers.start import start_router
from decouple import config
import json
from scheduleBot.handlers.back_to_main_menu import return_to_main_menu

# –†–æ—É—Ç–µ—Ä –ø–æ–∏—Å–∫–∞
search_router = Router()

# –†–æ—É—Ç–µ—Ä –≤—ã–±–æ—Ä–∞
choice_router = Router()

# FSM
class SearchInfo(StatesGroup):
    group_name = State()
    group_id = State()

    teacher_name = State()
    teacher_id = State()

    auditorium_name = State()
    auditorium_id = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã –≤ MySQL
async def find_group_in_db(group_name: str):
    query = """
    SELECT idnumber
    FROM event_participants
    WHERE name = %s;
    """

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—É–ª—É MySQL
    async with get_schedule_pool().acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(query, group_name)
            result = await cursor.fetchone()

    if result:
        return result[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π idnumber
    else:
        return None  # –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ MySQL
async def find_teacher_in_db(teacher_name: str):
    query = """
        SELECT idnumber
        FROM event_participants
        WHERE name = %s AND role = 'teacher';
        """

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—É–ª—É MySQL
    async with get_schedule_pool().acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(query, teacher_name)
            result = await cursor.fetchone()

    if result:
        return result[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π idnumber
    else:
        return None  # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤ MySQL
async def find_auditorium_in_db(auditorium_name: str):
    query = """
        SELECT idnumber
        FROM event_places
        WHERE auditorium = %s;
        """

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—É–ª—É MySQL
    async with get_schedule_pool().acquire() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute(query, auditorium_name)
            result = await cursor.fetchone()

    if result:
        return result[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π idnumber
    else:
        return None  # –ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –≥—Ä—É–ø–ø—ã –≤ FSM
async def has_fsm_group(state: FSMContext) -> bool:
    data = await state.get_data()
    return 'group_id' in data and data['group_id'] is not None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ FSM
async def has_fsm_teacher(state: FSMContext) -> bool:
    data = await state.get_data()
    return 'teacher_id' in data and data['teacher_id'] is not None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤ FSM
async def has_fsm_auditorium(state: FSMContext) -> bool:
    data = await state.get_data()
    return 'auditorium_id' in data and data['auditorium_id'] is not None

"""
    –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø—ã
"""
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –≥—Ä—É–ø–ø—É
@search_router.message(F.text == "üë®‚Äçüéì–ì—Ä—É–ø–ø–∞üë©‚Äçüéì")
async def search_schedule_group(message: Message, state: FSMContext):
    if await has_fsm_group(state):
        # –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ —É–∂–µ –∏—Å–∫–∞–ª–∏ –≥—Ä—É–ø–ø—É, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = await state.get_data()
        last_group = data['group_name']
        await state.set_state(SearchInfo.group_name)
        await message.answer(
            f'–í—ã —É–∂–µ –∏—Å–∫–∞–ª–∏ "{last_group}" —Ä–∞–Ω–µ–µ. –•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è?',
            reply_markup=yes_no_kb(message.from_user.id)
        )
    else:
        await state.set_state(SearchInfo.group_name)
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ –∫–æ—Ä–æ—Ç–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏–Ω-368)")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–Ω–µ–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
@choice_router.message(F.text == "‚úÖ–î–∞‚úÖ", SearchInfo.group_name)
async def schedule_for_group_from_fsm(message: Message, state: FSMContext):
    data = await state.get_data()
    group_name = data['group_name']
    group_id = data['group_id']
    if group:
        await message.answer(f"–ò—â—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã: {group_name}...")

    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –≥—Ä—É–ø–ø—É. –ù–∞–ø–∏—à–∏—Ç–µ –µ—ë –∑–∞–Ω–æ–≤–æ.")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏ –≤–≤–æ–¥–∏—Ç –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
@choice_router.message(F.text == "‚ùå–ù–µ—Ç‚ùå", SearchInfo.group_name)
async def search_schedule_new_group(message: Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ –∫–æ—Ä–æ—Ç–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏–Ω-368):")


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
@choice_router.message(SearchInfo.group_name)
async def handle_group_input(msg: Message, state: FSMContext):
    group_name = msg.text
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if group_name == "‚è™–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚è™":
        await return_to_main_menu(msg)
        return

    # –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –≤ –ë–î
    group_id = await find_group_in_db(group_name)

    if group_id:
        await msg.answer(f"–ì—Ä—É–ø–ø–∞ {group_name}, {group_id} –Ω–∞–π–¥–µ–Ω–∞!")
        await state.update_data(group_name = group_name)
        await state.update_data(group_id = group_id)
        # –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    else:
        await msg.answer(f"–ì—Ä—É–ø–ø–∞ {group_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@search_router.message(F.text == "üë®‚Äçüè´–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—åüë©‚Äçüè´")
async def search_teacher(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await message.answer('–ù–∞–ø–∏—à–∏ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
@search_router.message(F.text == "üè¨–ê—É–¥–∏—Ç–æ—Ä–∏—èüè¨")
async def search_auditorium(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await message.answer('–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏(–í-903)')


