import asyncio
#from importlib.metadata import pass_none


from aiogram.utils.chat_action import ChatActionSender
from scheduleBot.aiogram_run import get_schedule_pool
from scheduleBot.create_bot import bot, redis_pool
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
import scheduleBot.keyboards.all_keyboards
from scheduleBot.handlers.start import start_router
from decouple import config
import json

search_router = Router()
schedule_pool = None



# FSM
class SearchInfo(StatesGroup):
    group = State()
    teacher = State()
    auditorium = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã –≤ MySQL
async def find_group_in_db(group_name: str):
    query = """
    SELECT *
    FROM schedules
    WHERE JSON_CONTAINS(
        event_participants,
        %s,
        '$'
    )
    """
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—É–ª—É MySQL
    async with get_schedule_pool().acquire() as conn:
        async with conn.cursor() as cursor:
            # –§–æ—Ä–º–∏—Ä—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_value = json.dumps({"name": group_name})
            await cursor.execute(query, (search_value,))
            result = await cursor.fetchall()
            return result


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
@search_router.message(F.text == "üë®‚Äçüéì–ì—Ä—É–ø–ø–∞üë©‚Äçüéì")
async def search_schedule(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await asyncio.sleep(2)
        await message.answer('–ù–∞–ø–∏—à–∏ –≥—Ä—É–ø–ø—É –≤ –∫–æ—Ä–æ—Ç–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ(–ø—Ä–∏–Ω-368)')

    # –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –≤ –ë–î
    @search_router.message()
    async def handle_group_input(msg: Message, state: FSMContext):
        group_name = msg.text
        result = await find_group_in_db(group_name)

        if result:
            await msg.answer(f"–ì—Ä—É–ø–ø–∞ {group_name} –Ω–∞–π–¥–µ–Ω–∞:\n{result}")
        else:
            await msg.answer(f"–ì—Ä—É–ø–ø–∞ {group_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@search_router.message(F.text == "üë®‚Äçüè´–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—åüë©‚Äçüè´")
async def search_teacher(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await asyncio.sleep(2)
        await message.answer('–ù–∞–ø–∏—à–∏ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
@search_router.message(F.text == "üè¨–ê—É–¥–∏—Ç–æ—Ä–∏—èüè¨")
async def search_auditorium(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await asyncio.sleep(2)
        await message.answer('–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏(–í-903)')


